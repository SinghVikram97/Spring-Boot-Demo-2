JPA- Java Persistence API

Author-> firstName(String), lastName(String)
 |
 |  * Many to many relationship, author can have multiple books and each book can have multiple authors
 |
Book-> title(String), isbn(String)

[x] POJO-> Plain Old Java Objects, Implement them in model package, JPA requires an empty/no-args constructor too
[x] JPA Id's -> Make them into JPA "Entities"
[x] JPA Relationships -> Many to many relationship b/w authors and books

[x] Equals & Hash Code -> Implement equality based on id assigned by database
[x] To String

[x] Spring Data Repositories -> To interact with database, taking care of hibernate, transactional command, jdbc code provides abstraction

[x] Initialize some data to work with-> Command Line Runner, which Spring runs when it finds one

[x] Add Publisher Entity
[x] JPA Relationships- A Publisher can publish many books but a book will have only a single publisher, one to many

[x] h2 console enable- localhost:8080/h2-console and take jdbc url from console log which has Database available at 'jdbc:h2:mem:5f0e553c-519d-4092-bc38-7f3b44daa8a1'

[x] Spring MVC- Model View Controller
[x] Client requests -> Controller requests data from -> Model, returns data to -> Controller, gives model to -> View, renders the view
[x] Spring MVC


                               Handler Mapping (Which controller to user for this req)
                               ^/
                              //
                             /v
Client    ------> Dispatcher     -----------> Controller ---------- Service(Get data from DB)
(Request) <------  Servlet                        |                      |
                (Front Controller) <----------- Model                    |
                     ^        \                                         Data
                      \      Model
                       \       |
                        \      |
                         \    View
                          (JSP,Velocity,
                            Thymeleaf)


[x] Configuring Controller -> Map a particular controller to a path, when spring gets a request on a particular path that controller is called
[x] Annotate Controller Class with @Controller, this will register the class as a spring bean and as a controller in spring mvc
[x] To maps methods to http request paths use @RequestMapping

[x] Implementing View- We use Thymeleaf , Java template engine